// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProFinder.API.Infrastructure.Data;

namespace ProFinder.API.Migrations
{
    [DbContext(typeof(ProFinderDbContext))]
    partial class ProFinderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProFinder.API.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("ServiceTypeId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Fix it",
                            ServiceTypeId = 4,
                            StartDate = new DateTime(2015, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Handyman services",
                            ServiceTypeId = 4,
                            StartDate = new DateTime(1990, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Fast repair",
                            ServiceTypeId = 4,
                            StartDate = new DateTime(2012, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Home improvement",
                            ServiceTypeId = 4,
                            StartDate = new DateTime(2018, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Cleaning pros",
                            ServiceTypeId = 3,
                            StartDate = new DateTime(2005, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Cleaning services",
                            ServiceTypeId = 3,
                            StartDate = new DateTime(2010, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Dedicated cleaning",
                            ServiceTypeId = 3,
                            StartDate = new DateTime(2013, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Alpha cleaners",
                            ServiceTypeId = 3,
                            StartDate = new DateTime(2015, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Clean solutions",
                            ServiceTypeId = 3,
                            StartDate = new DateTime(2016, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Tech experts",
                            ServiceTypeId = 2,
                            StartDate = new DateTime(2015, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "IT solutions",
                            ServiceTypeId = 2,
                            StartDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Fast computer repair",
                            ServiceTypeId = 2,
                            StartDate = new DateTime(2018, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "JD pet services",
                            ServiceTypeId = 1,
                            StartDate = new DateTime(2017, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Pet care",
                            ServiceTypeId = 1,
                            StartDate = new DateTime(2018, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry",
                            Name = "Pet lovers",
                            ServiceTypeId = 1,
                            StartDate = new DateTime(2016, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ProFinder.API.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "emiller@email.com",
                            FirstName = "Emma",
                            LastName = "Miller"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mdavis@email.com",
                            FirstName = "Michael",
                            LastName = "Davis"
                        },
                        new
                        {
                            Id = 3,
                            Email = "swilson@email.com",
                            FirstName = "Sophia",
                            LastName = "Wilson"
                        },
                        new
                        {
                            Id = 4,
                            Email = "ljones@email.com",
                            FirstName = "Liam",
                            LastName = "Jones"
                        },
                        new
                        {
                            Id = 5,
                            Email = "ebrown@email.com",
                            FirstName = "Emily",
                            LastName = "Brown"
                        });
                });

            modelBuilder.Entity("ProFinder.API.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Rating");

                    b.Property<int?>("WriterId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WriterId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Excelent service!",
                            CompanyId = 2,
                            Date = new DateTime(2019, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5
                        });
                });

            modelBuilder.Entity("ProFinder.API.Domain.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pet sitting"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Computer repair"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cleaners"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Handyman"
                        });
                });

            modelBuilder.Entity("ProFinder.API.Domain.Entities.Company", b =>
                {
                    b.HasOne("ProFinder.API.Domain.Entities.ServiceType", "ServiceType")
                        .WithMany("Companies")
                        .HasForeignKey("ServiceTypeId");
                });

            modelBuilder.Entity("ProFinder.API.Domain.Entities.Review", b =>
                {
                    b.HasOne("ProFinder.API.Domain.Entities.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ProFinder.API.Domain.Entities.Customer", "Writer")
                        .WithMany("Reviews")
                        .HasForeignKey("WriterId");
                });
#pragma warning restore 612, 618
        }
    }
}
